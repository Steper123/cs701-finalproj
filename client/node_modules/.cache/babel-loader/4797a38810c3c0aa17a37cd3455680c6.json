{"ast":null,"code":"var _jsxFileName = \"/Users/steper123/Desktop/CS_701/Term_Project/actualAPP/client/src/components/EventHolder.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Button, Row, Col } from \"reactstrap\";\n\nconst EventHolder = ({\n  team\n}) => {\n  const [escucha, setEscucha] = React.useState(false);\n  var indexSpeech = 0;\n  var SpeechRecognition = window.webkitSpeechRecognition;\n  var recognition = new SpeechRecognition();\n  recognition.continuous = true;\n\n  recognition.onstart = function () {\n    console.log(\"We are listening. Try speaking into the microphone.\");\n  };\n\n  recognition.onspeechend = function () {\n    recognition.stop();\n  };\n\n  recognition.onresult = function (event) {\n    var transcript = event.results[indexSpeech][0].transcript;\n    var confidence = event.results[indexSpeech][0].confidence;\n    indexSpeech += 1;\n    console.log(transcript);\n    console.log(confidence);\n  };\n\n  const listeningButton = /*#__PURE__*/React.createElement(Button, {\n    onClick: () => {\n      if (escucha == false) {\n        recognition.start();\n        setEscucha(true);\n      } else {\n        console.log(\"Speech has stopped\");\n        setEscucha(false);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Test\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, listeningButton);\n};\n\nexport default EventHolder;","map":{"version":3,"sources":["/Users/steper123/Desktop/CS_701/Term_Project/actualAPP/client/src/components/EventHolder.js"],"names":["React","useState","useEffect","styled","Container","Button","Row","Col","EventHolder","team","escucha","setEscucha","indexSpeech","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","onstart","console","log","onspeechend","stop","onresult","event","transcript","results","confidence","listeningButton","start"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,GAAjC,QAA4C,YAA5C;;AAIA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAChC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,KAAK,CAACC,QAAN,CAAe,KAAf,CAA9B;AAEA,MAAIW,WAAW,GAAG,CAAlB;AACA,MAAIC,iBAAiB,GAAGC,MAAM,CAACC,uBAA/B;AACA,MAAIC,WAAW,GAAG,IAAIH,iBAAJ,EAAlB;AACAG,EAAAA,WAAW,CAACC,UAAZ,GAAyB,IAAzB;;AAEAD,EAAAA,WAAW,CAACE,OAAZ,GAAsB,YAAW;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACD,GAFD;;AAIAJ,EAAAA,WAAW,CAACK,WAAZ,GAA0B,YAAW;AACnCL,IAAAA,WAAW,CAACM,IAAZ;AACD,GAFD;;AAIAN,EAAAA,WAAW,CAACO,QAAZ,GAAuB,UAASC,KAAT,EAAgB;AACrC,QAAIC,UAAU,GAAGD,KAAK,CAACE,OAAN,CAAcd,WAAd,EAA2B,CAA3B,EAA8Ba,UAA/C;AACA,QAAIE,UAAU,GAAGH,KAAK,CAACE,OAAN,CAAcd,WAAd,EAA2B,CAA3B,EAA8Be,UAA/C;AACAf,IAAAA,WAAW,IAAI,CAAf;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYK,UAAZ;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYO,UAAZ;AACH,GANC;;AAQA,QAAMC,eAAe,gBACnB,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAM;AACrB,UAAIlB,OAAO,IAAI,KAAf,EAAsB;AACpBM,QAAAA,WAAW,CAACa,KAAZ;AACAlB,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OAHD,MAIK;AACHQ,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACA,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGiB,eADH,CADF;AASD,CAhDD;;AAkDA,eAAepB,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Button, Row, Col } from \"reactstrap\";\n\n\n\nconst EventHolder = ({ team }) => {\n  const [escucha, setEscucha] = React.useState(false);\n\n  var indexSpeech = 0;\n  var SpeechRecognition = window.webkitSpeechRecognition;\n  var recognition = new SpeechRecognition();\n  recognition.continuous = true;\n\n  recognition.onstart = function() {\n    console.log(\"We are listening. Try speaking into the microphone.\");\n  };\n\n  recognition.onspeechend = function() {\n    recognition.stop();\n  }\n\n  recognition.onresult = function(event) {\n    var transcript = event.results[indexSpeech][0].transcript;\n    var confidence = event.results[indexSpeech][0].confidence;\n    indexSpeech += 1;\n    console.log(transcript);\n    console.log(confidence);\n};\n\n  const listeningButton = (\n    <Button onClick={() => {\n      if (escucha == false) {\n        recognition.start();\n        setEscucha(true);\n      }\n      else {\n        console.log(\"Speech has stopped\");\n        setEscucha(false);\n      }\n      }}>Test</Button>\n  );\n\n\n\n  return (\n    <div>\n      {listeningButton}\n    </div>\n  );\n\n\n\n\n}\n\nexport default EventHolder;\n"]},"metadata":{},"sourceType":"module"}