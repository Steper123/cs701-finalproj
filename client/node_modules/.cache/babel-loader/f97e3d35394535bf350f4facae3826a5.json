{"ast":null,"code":"var _jsxFileName = \"/Users/steper123/Desktop/CS_701/Term_Project/actualAPP/client/src/components/AddDeletePerson.js\";\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Button, Row, Col } from \"reactstrap\";\nimport PlayerHolder from \"./PlayerHolder\";\nimport FanHolder from \"./FanHolder\";\n\nconst AddDeletePerson = ({\n  team,\n  type\n}) => {\n  const [list, setList] = React.useState([]);\n  useEffect(() => {\n    const buildList = () => {\n      if (type == \"Players\") {\n        fetch(\"/api/players\").then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error(response.statusText);\n        }).then(fetchedPlayers => {\n          const actualList = fetchedPlayers.filter(player => player.teamId == team.id);\n          setList(actualList);\n        }).catch(err => console.error(err)); // eslint-disable-line no-console\n      } else if (type == \"Scorers\") {\n        fetch(`/api/teamaccess/team/${team.id}`).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error(response.statusText);\n        }).then(fetchedAccess => {\n          const onesIWant = fetchedAccess.filter(access => access.teamId == team.id && access.type == 2);\n          const accessIDs = onesIWant.map(access => access.userId);\n          const users = fetch(`/api/users`).then(response => {\n            if (!response.ok) {\n              throw new Error(response.status_text);\n            }\n\n            return response.json();\n          }).then(data => {\n            return data;\n          }).catch(error => {\n            console.log(error);\n          });\n          const trueList = users.filter(user => accessIDs.includes(user.id));\n          setList(trueList);\n        });\n      } else if (type == \"Fans\") {\n        fetch(`/api/teamaccess/team/${team.id}`).then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n\n          throw new Error(response.statusText);\n        }).then(fetchedAccess => {\n          const accessIDs = fetchedAccess.map(access => access.userId);\n          const users = fetch(`/api/users`).then(response => {\n            if (!response.ok) {\n              throw new Error(response.status_text);\n            }\n\n            return response.json();\n          }).then(data => {\n            return data;\n          }).catch(error => {\n            console.log(error);\n          });\n          const trueList = users.filter(user => accessIDs.includes(user.id));\n          setList(trueList);\n        });\n      }\n    };\n\n    buildList();\n  }, []); //const handleDeletePerson = (person) => {\n  //};\n\n  const handleAddPlayer = player => {\n    fetch(\"/api/players\", {\n      method: \"POST\",\n      body: JSON.stringify(player),\n      headers: new Headers({\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText);\n    }) //Add the newly created order to local orders and update order state\n    .then(receivedPerson => {\n      const newList = list.push(receivedPerson);\n      setList(newList);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  const handleAddUser = accessSelected => {\n    fetch(\"/api/teamaccess\", {\n      method: \"POST\",\n      body: JSON.stringify(accessSelected),\n      headers: new Headers({\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText);\n    }).catch(err => {\n      console.error(err);\n    });\n  };\n\n  if (list != null && type == \"Players\") {\n    const trueMapping = list.map(person => /*#__PURE__*/React.createElement(PlayerHolder, {\n      player: person,\n      teamLoc: team.location,\n      teamName: team.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 46\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, \" \", trueMapping, \" \"));\n  } else if (list != null) {\n    const trueMapping = list.map(person => /*#__PURE__*/React.createElement(FanHolder, {\n      person: person,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 46\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, \" \", trueMapping, \" \"));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    });\n  }\n};\n\nexport default AddDeletePerson;","map":{"version":3,"sources":["/Users/steper123/Desktop/CS_701/Term_Project/actualAPP/client/src/components/AddDeletePerson.js"],"names":["React","useState","useEffect","styled","Container","Button","Row","Col","PlayerHolder","FanHolder","AddDeletePerson","team","type","list","setList","buildList","fetch","then","response","ok","json","Error","statusText","fetchedPlayers","actualList","filter","player","teamId","id","catch","err","console","error","fetchedAccess","onesIWant","access","accessIDs","map","userId","users","status_text","data","log","trueList","user","includes","handleAddPlayer","method","body","JSON","stringify","headers","Headers","Accept","receivedPerson","newList","push","handleAddUser","accessSelected","trueMapping","person","location","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Container, Button, Row, Col } from \"reactstrap\";\n\nimport PlayerHolder from \"./PlayerHolder\";\nimport FanHolder from \"./FanHolder\";\n\nconst AddDeletePerson = ({ team, type }) => {\n  const [list, setList] = React.useState([]);\n\n  useEffect(() => {\n    const buildList = () => {\n      if (type == \"Players\") {\n        fetch(\"/api/players\")\n          .then((response) => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(response.statusText);\n          })\n          .then((fetchedPlayers) => {\n            const actualList = fetchedPlayers.filter(player => player.teamId == team.id);\n            setList(actualList);\n          }).catch((err) => console.error(err)); // eslint-disable-line no-console\n      }\n      else if (type == \"Scorers\") {\n        fetch(`/api/teamaccess/team/${team.id}`)\n          .then((response) => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(response.statusText);\n          })\n          .then((fetchedAccess) => {\n            const onesIWant = fetchedAccess.filter(access => access.teamId == team.id && access.type == 2);\n            const accessIDs = onesIWant.map(access => access.userId);\n            const users = fetch(`/api/users`)\n              .then(response => {\n                if (!response.ok) {\n                  throw new Error(response.status_text);\n                }\n                return response.json();\n              })\n              .then(data => {\n                return data;\n              })\n              .catch(error => {\n                console.log(error);\n              });\n\n            const trueList = users.filter(user => accessIDs.includes(user.id));\n            setList(trueList);\n          })\n      }\n\n      else if (type == \"Fans\") {\n        fetch(`/api/teamaccess/team/${team.id}`)\n          .then((response) => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(response.statusText);\n          })\n          .then((fetchedAccess) => {\n            const accessIDs = fetchedAccess.map(access => access.userId);\n            const users = fetch(`/api/users`)\n              .then(response => {\n                if (!response.ok) {\n                  throw new Error(response.status_text);\n                }\n                return response.json();\n              })\n              .then(data => {\n                return data;\n              })\n              .catch(error => {\n                console.log(error);\n              });\n\n            const trueList = users.filter(user => accessIDs.includes(user.id));\n            setList(trueList);\n          })\n      }\n    }\n    buildList();\n    }, []);\n\n    //const handleDeletePerson = (person) => {\n\n\n    //};\n\n    const handleAddPlayer = (player) => {\n        fetch(\"/api/players\", {\n          method: \"POST\",\n          body: JSON.stringify(player),\n          headers: new Headers({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          })\n        })\n          .then(response => {\n            if (response.ok) {\n              return response.json();\n            }\n            throw new Error(response.statusText);\n          })\n          //Add the newly created order to local orders and update order state\n          .then(receivedPerson => {\n            const newList = list.push(receivedPerson);\n            setList(newList);\n          })\n          .catch(err => {\n            console.error(err);\n          });\n    }\n\n    const handleAddUser = (accessSelected) => {\n      fetch(\"/api/teamaccess\", {\n        method: \"POST\",\n        body: JSON.stringify(accessSelected),\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        })\n      })\n        .then(response => {\n          if (response.ok) {\n            return response.json();\n          }\n          throw new Error(response.statusText);\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    }\n\n    if (list != null && type == \"Players\") {\n      const trueMapping = list.map(person => <PlayerHolder player={person} teamLoc={team.location} teamName={team.name}></PlayerHolder>)\n      return (\n        <div>\n          <ul> {trueMapping} </ul>\n        </div>\n      );\n\n    }\n    else if (list != null) {\n      const trueMapping = list.map(person => <FanHolder person={person}></FanHolder>)\n      return (\n        <div>\n          <ul> {trueMapping} </ul>\n        </div>\n      );\n    }\n    else {\n      return (<div></div>);\n    }\n\n}\n\nexport default AddDeletePerson;\n"]},"metadata":{},"sourceType":"module"}